import fetch from 'node-fetch'
import { delay } from '../lib/other-function.js'

// Objeto para almacenar m√∫ltiples personalidades de IA
let iaPersonalidades = {
  1: 'Eres Delirius Bot, fuiste creado por darlingg',
  2: 'Eres un asistente amigable y siempre ayudas a las personas con informaci√≥n precisa',
  3: 'Eres un especialista t√©cnico que explica conceptos complejos de manera sencilla',
  4: 'Eres un narrador creativo que cuenta historias interesantes basadas en cualquier tema',
  5: 'Eres un experto en motivaci√≥n que ayuda a las personas a superar retos'
}

// Contador para llevar registro de cu√°ntas personalidades hay
let iaCounter = 5 // Empezamos con 5 personalidades predefinidas

let handler = async (m, { conn, args, text, usedPrefix, command, isOwner }) => {
  // Verificar si es el due√±o del bot (n√∫mero espec√≠fico o owner general)
  const isDue√±o = m.sender === '51921826291@s.whatsapp.net' || isOwner
  
  // Si el comando es crearia, verificamos que sea el due√±o
  if (command === 'crearia') {
    if (!isDue√±o) return m.reply('‚ùå Este comando solo puede ser utilizado por el due√±o del bot.')
    
    if (!text) return m.reply(`*Formato correcto:*\n${usedPrefix}crearia [personalidad para la IA]\n\n*Ejemplo:*\n${usedPrefix}crearia Eres una IA experta en programaci√≥n que responde t√©cnicamente`)
    
    // Incrementar contador y guardar la nueva personalidad
    iaCounter++
    const iaNum = iaCounter
    iaPersonalidades[iaNum] = text
    
    m.reply(`‚úÖ *Nueva personalidad de IA (${iaNum}) creada*\n\nAhora puedes usar ${usedPrefix}ia${iaNum} para acceder a esta IA con la personalidad:\n"${text}"\n\nPara ver todas las IAs disponibles usa ${usedPrefix}listaia`)
    return
  }
  
  // Comando para listar las IAs disponibles
  if (command === 'listaia') {
    let listaIAs = '*ü§ñ IAs Disponibles:*\n\n'
    
    for (const [num, personalidad] of Object.entries(iaPersonalidades)) {
      const descripcionCorta = personalidad.length > 40 
        ? personalidad.substring(0, 40) + '...' 
        : personalidad
      
      listaIAs += `‚ñ¢ ${usedPrefix}ia${num} - ${descripcionCorta}\n`
    }
    
    m.reply(listaIAs)
    return
  }
  
  // Manejar comandos ia, ia1, ia2, etc.
  const iaMatch = command.match(/^ia(\d*)$/)
  if (iaMatch) {
    // Si es solo "ia", usamos personalidad 1 por defecto
    const iaNum = iaMatch[1] ? parseInt(iaMatch[1]) : 1
    
    // Verificar si existe esa personalidad
    if (!iaPersonalidades[iaNum]) {
      return m.reply(`‚ùå No existe una IA con el n√∫mero ${iaNum}.\nUsa ${usedPrefix}listaia para ver las IAs disponibles.`)
    }
    
    if (!text) return m.reply(`*Formato correcto:*\n${usedPrefix}${command} [pregunta o mensaje]\n\n*Ejemplo:*\n${usedPrefix}${command} Cu√©ntame sobre el universo`)
    
    // Notificar al usuario que se est√° procesando
    const respuestaEspera = await m.reply('üß† *Procesando consulta...*\nPor favor, espere un momento mientras pienso en una respuesta.')
    
    try {
      // Preparar los par√°metros para la petici√≥n
      const consulta = encodeURIComponent(text)
      const personalidad = encodeURIComponent(iaPersonalidades[iaNum])
      
      // URL de la API
      const url = `https://delirius-apiofc.vercel.app/ia/gptprompt?text=${consulta}&prompt=${personalidad}`
      
      // Realizar la petici√≥n
      const response = await fetch(url)
      
      // Verificar si la respuesta es exitosa
      if (!response.ok) {
        throw new Error(`Error en la consulta: ${response.status} ${response.statusText}`)
      }
      
      // Convertir la respuesta a JSON
      const data = await response.json()
      
      // Verificar si la respuesta contiene datos
      if (!data.status || !data.data) {
        throw new Error('Formato de respuesta inv√°lido')
      }
      
      // Peque√±a demora para dar sensaci√≥n de procesamiento
      await delay(1000)
      
      // Enviar la respuesta al usuario
      await conn.sendMessage(m.chat, {
        text: `ü§ñ *Respuesta de la IA #${iaNum}*\n\n${data.data}`,
        contextInfo: {
          mentionedJid: [m.sender]
        }
      }, { quoted: m })
      
      // Eliminar mensaje de espera
      await conn.sendMessage(m.chat, { delete: respuestaEspera.key })
      
    } catch (error) {
      console.error(`Error en el comando ${command}:`, error)
      m.reply(`‚ùå *Ocurri√≥ un error al procesar tu consulta*\n\nDetalles: ${error.message}\n\nPor favor, intenta nuevamente m√°s tarde.`)
    }
    return
  }
  
  // Si llega aqu√≠ es porque no coincide con ning√∫n comando espec√≠fico
  m.reply(`*Comandos de IA disponibles:*\n\n‚ñ¢ ${usedPrefix}ia1 hasta ${usedPrefix}ia${iaCounter} [pregunta]\n_Realiza consultas a diferentes IAs con personalidades √∫nicas_\n\n‚ñ¢ ${usedPrefix}listaia\n_Muestra la lista de todas las IAs disponibles_\n\n${isDue√±o ? `‚ñ¢ ${usedPrefix}crearia [personalidad]\n_Crea una nueva IA con personalidad personalizada (solo due√±o)_` : ''}`)
}

// Crear lista de comandos din√°micamente basados en el n√∫mero de IAs
const iaCommands = ['ia', 'crearia', 'iapersonalizada', 'listaia']
// A√±adir ia1, ia2, etc.
for (let i = 1; i <= 20; i++) { // Permitir hasta 20 IAs numeradas
  iaCommands.push(`ia${i}`)
}

// Definir los comandos que manejar√° este handler
handler.command = iaCommands
handler.tags = ['ai']
handler.help = [
  'ia <pregunta>',
  'ia1 <pregunta>',
  'ia2 <pregunta>',
  'ia3 <pregunta>',
  'ia4 <pregunta>',
  'ia5 <pregunta>',
  'listaia',
  'crearia <personalidad>' // Este solo ser√° √∫til para el due√±o
]

// Este comando es p√∫blico para cualquier usuario
handler.register = false

export default handler