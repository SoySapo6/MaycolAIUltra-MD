import crypto from 'crypto';

// Funci√≥n para generar un c√≥digo aleatorio
const generateRedeemCode = (length = 10) => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    code += characters.charAt(randomIndex);
  }
  return code;
};

// Funci√≥n para verificar si un c√≥digo es v√°lido
const isValidCode = (code, storedCodes) => {
  return storedCodes.some(stored => 
    stored.code === code && !stored.redeemed && (stored.expiresAt === 0 || stored.expiresAt > Date.now())
  );
};

let handler = async (m, { conn, text, args, usedPrefix, command }) => {
  // Inicializar c√≥digos de canje en la base de datos si no existen
  if (!global.db.data.redeemCodes) {
    global.db.data.redeemCodes = [];
  }

  // Comando para canjear un c√≥digo
  if (command === 'canjearcodigo') {
    if (!text) return conn.reply(m.chat, `‚ö†Ô∏è Debes ingresar un c√≥digo. Ejemplo: ${usedPrefix}canjearcodigo ABC123XYZ`, m);

    const code = text.trim().toUpperCase();
    const userId = m.sender;

    // Verificar si el c√≥digo existe y es v√°lido
    const codeIndex = global.db.data.redeemCodes.findIndex(c => 
      c.code === code && !c.redeemed && (c.expiresAt === 0 || c.expiresAt > Date.now())
    );

    if (codeIndex === -1) {
      return conn.reply(m.chat, '‚ùå C√≥digo inv√°lido o ya ha sido canjeado.', m);
    }

    // Obtener la informaci√≥n del c√≥digo
    const codeInfo = global.db.data.redeemCodes[codeIndex];
    
    // Marcar el c√≥digo como canjeado
    global.db.data.redeemCodes[codeIndex].redeemed = true;
    global.db.data.redeemCodes[codeIndex].redeemedBy = userId;
    global.db.data.redeemCodes[codeIndex].redeemedAt = Date.now();

    // Verificar si el usuario existe en la base de datos
    if (!global.db.data.users[userId]) {
      global.db.data.users[userId] = {};
    }

    // Asignar las recompensas al usuario
    const { coins, exp, limit } = codeInfo.rewards;
    
    if (coins) {
      global.db.data.users[userId].money = (global.db.data.users[userId].money || 0) + coins;
    }
    
    if (exp) {
      global.db.data.users[userId].exp = (global.db.data.users[userId].exp || 0) + exp;
    }
    
    if (limit) {
      global.db.data.users[userId].limit = (global.db.data.users[userId].limit || 0) + limit;
    }

    // Enviar mensaje de confirmaci√≥n
    return conn.reply(m.chat, `‚úÖ ¬°C√≥digo canjeado con √©xito!
üìä Recompensas obtenidas:
${coins ? `üí∞ Monedas: +${coins}` : ''}
${exp ? `‚ú® Experiencia: +${exp}` : ''}
${limit ? `‚è≥ L√≠mite: +${limit}` : ''}

¬°Gracias por usar MaycolAIUltra-MD!`, m);
  }
  
  // Comando para generar un c√≥digo (solo para el due√±o)
  else if (command === 'generarcodigo') {
    // Verificar si el usuario es el due√±o
    if (!global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)) {
      return conn.reply(m.chat, '‚ùå Solo el due√±o del bot puede generar c√≥digos.', m);
    }

    // Parse argumentos: monedas, exp, l√≠mite, d√≠as de expiraci√≥n
    const parseArg = (argName) => {
      const arg = args.find(a => a.startsWith(`${argName}:`));
      return arg ? parseInt(arg.split(':')[1]) : 0;
    };

    const coins = parseArg('monedas');
    const exp = parseArg('exp');
    const limit = parseArg('limite');
    const expireDays = parseArg('dias');
    
    if (coins === 0 && exp === 0 && limit === 0) {
      return conn.reply(m.chat, `‚ö†Ô∏è Debes especificar al menos un tipo de recompensa.
Ejemplo: ${usedPrefix}generarcodigo monedas:1000 exp:500 limite:10 dias:7`, m);
    }

    // Generar c√≥digo √∫nico
    const code = generateRedeemCode(10);
    
    // Calcular fecha de expiraci√≥n (0 significa sin expiraci√≥n)
    const expiresAt = expireDays > 0 ? Date.now() + (expireDays * 24 * 60 * 60 * 1000) : 0;

    // Guardar c√≥digo en la base de datos
    global.db.data.redeemCodes.push({
      code,
      createdAt: Date.now(),
      createdBy: m.sender,
      expiresAt,
      redeemed: false,
      redeemedBy: null,
      redeemedAt: null,
      rewards: { coins, exp, limit }
    });

    // Enviar c√≥digo al due√±o
    return conn.reply(m.chat, `‚úÖ C√≥digo generado con √©xito:
üìù *C√ìDIGO*: ${code}
üìä *RECOMPENSAS*:
${coins ? `üí∞ Monedas: ${coins}` : ''}
${exp ? `‚ú® Experiencia: ${exp}` : ''}
${limit ? `‚è≥ L√≠mite: ${limit}` : ''}
${expireDays > 0 ? `‚è∞ Expira en: ${expireDays} d√≠as` : '‚è∞ Sin expiraci√≥n'}

Comparte este c√≥digo con los usuarios para que puedan canjearlo.`, m);
  }
  
  // Comando para listar c√≥digos (solo para el due√±o)
  else if (command === 'listcodigos') {
    // Verificar si el usuario es el due√±o
    if (!global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)) {
      return conn.reply(m.chat, '‚ùå Solo el due√±o del bot puede ver la lista de c√≥digos.', m);
    }

    const codes = global.db.data.redeemCodes;
    if (!codes || codes.length === 0) {
      return conn.reply(m.chat, 'üìù No hay c√≥digos generados.', m);
    }

    // Filtrar c√≥digos no expirados
    const validCodes = codes.filter(c => !c.redeemed && (c.expiresAt === 0 || c.expiresAt > Date.now()));
    const redeemedCodes = codes.filter(c => c.redeemed);

    let message = `üìã *LISTA DE C√ìDIGOS*\n\n`;
    message += `üü¢ *C√≥digos v√°lidos*: ${validCodes.length}\n`;
    message += `üî¥ *C√≥digos canjeados*: ${redeemedCodes.length}\n\n`;

    // Mostrar c√≥digos v√°lidos
    if (validCodes.length > 0) {
      message += `*C√ìDIGOS DISPONIBLES:*\n`;
      validCodes.forEach((c, i) => {
        message += `${i + 1}. *${c.code}*\n`;
        message += `   üí∞ Monedas: ${c.rewards.coins || 0}\n`;
        message += `   ‚ú® Exp: ${c.rewards.exp || 0}\n`;
        message += `   ‚è≥ L√≠mite: ${c.rewards.limit || 0}\n`;
        message += `   üìÖ Creado: ${new Date(c.createdAt).toLocaleDateString()}\n`;
        message += `   ‚è∞ Expira: ${c.expiresAt === 0 ? 'Nunca' : new Date(c.expiresAt).toLocaleDateString()}\n\n`;
      });
    }

    return conn.reply(m.chat, message, m);
  }
};

handler.help = [
  'canjearcodigo <c√≥digo>',
  'generarcodigo monedas:X exp:Y limite:Z dias:W',
  'listcodigos'
];
handler.tags = ['rpg'];
handler.command = /^(canjearcodigo|generarcodigo|listcodigos)$/i;

export default handler;